---
import shiki from 'shiki';
import { existsFile, readFile } from '../helpers/files';

export interface Props {
  src?: string;
  content?: string;
  onlyBody?: boolean;
  lang?: string;
}

const highlighterLight = await shiki.getHighlighter({ theme: 'github-light' });

const highlighterDark = await shiki.getHighlighter({ theme: 'github-dark' });

const { src, content, onlyBody, lang } = Astro.props;

const slotContent = await Astro.slots.render('default');

let code = content ?? slotContent;

let extension = lang;

if (src && existsFile(src)) {
  code = readFile(src);

  extension = src?.split('.').pop() ?? 'plaintext';
}

if (onlyBody && code?.includes('<body')) {
  const bodyContentPattern =
    /^[\s\S]*<body[^\>]*>\n([\s\S]*)\n\s*<\/body>[\s\S]*$/gim;

  const body = bodyContentPattern.exec(code)?.[1] ?? code;

  const indentationPattern = /^(\s*)</gim;

  const firstIndentation = indentationPattern.exec(body)?.[1] ?? '';

  code = body?.replace(new RegExp(`^${firstIndentation}`, 'gim'), '') ?? code;
}

const codeMarkdownLight = highlighterLight.codeToHtml(code, {
  lang: extension,
});

const codeMarkdownDark = highlighterDark.codeToHtml(code, { lang: extension });
---

<Fragment set:html={codeMarkdownLight} />

<Fragment set:html={codeMarkdownDark} />
