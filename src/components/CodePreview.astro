---
import shiki from 'shiki';
import {
  createShikiHighlighter,
  renderCodeToHTML,
  runTwoSlash,
} from 'shiki-twoslash';
import { existsFile, readFile } from '../helpers/files';

export interface Props {
  src?: string;
  content?: string;
  onlyBody?: boolean;
  lang?: string;
}

const highlighter = await createShikiHighlighter({
  themes: ['github-light', 'github-dark'],
});

const highlighterLight = await shiki.getHighlighter({ theme: 'github-light' });

const highlighterDark = await shiki.getHighlighter({ theme: 'github-dark' });

const { src, content, onlyBody, lang } = Astro.props;

const slotContent = await Astro.slots.render('default');

let code = content ?? slotContent;

let extension = lang ?? 'plaintext';

if (src && existsFile(src)) {
  code = readFile(src);

  extension = src?.split('.').pop() ?? 'plaintext';
}

if (onlyBody && code?.includes('<body')) {
  const bodyContentPattern =
    /^[\s\S]*<body[^\>]*>\n([\s\S]*)\n\s*<\/body>[\s\S]*$/gim;

  const body = bodyContentPattern.exec(code)?.[1] ?? code;

  const indentationPattern = /^(\s*)</gim;

  const firstIndentation = indentationPattern.exec(body)?.[1] ?? '';

  code = body?.replace(new RegExp(`^${firstIndentation}`, 'gim'), '') ?? code;
}

const acceptedTwoslash = [
  'js',
  'javascript',
  'ts',
  'typescript',
  'tsx',
  'jsx',
  'json',
  'jsn',
].includes(extension);

let html = '';

if (acceptedTwoslash) {
  const twoslash = runTwoSlash(code, extension, {});

  html = renderCodeToHTML(
    twoslash.code,
    extension,
    { twoslash: true },
    {},
    highlighter,
    twoslash
  );
}
---

{
  acceptedTwoslash ? (
    <Fragment set:html={html} />
  ) : (
    <>
      <Fragment
        set:html={highlighterLight.codeToHtml(code, {
          lang: extension,
        })}
      />
      <Fragment
        set:html={highlighterDark.codeToHtml(code, {
          lang: extension,
        })}
      />
    </>
  )
}
