---
import { Icon } from 'astro-icon';
import NavBar from '../components/NavBar.astro';
import Sidebar from '../components/Sidebar.astro';
import { GITHUB_EDIT_URL } from '../consts';

import '../styles/twoslash.css';

export interface Props {
  frontmatter: {
    title: string;
  };
  file: string;
  headings: {
    slug: string;
    text: string;
    depth: number;
  }[];
}

const { frontmatter, headings, file } = Astro.props;

const githubEditUrl = `${GITHUB_EDIT_URL}/src${file.split('/src').pop()}`;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    <title>{frontmatter?.title ?? 'LM'}</title>
  </head>
  <body class="bg-gray-100 dark:bg-slate-800 dark:text-white">
    <NavBar />
    <div
      class="relative z-0 lg:pl-40 xl:pl-64 flex max-sm:flex-col justify-between items-stretch"
    >
      <Sidebar />
      <article
        class="md:mx-auto py-8 max-sm:px-4 prose 2xl:prose-xl dark:prose-invert overflow-hidden"
      >
        <slot />
        <p>
          <a href={githubEditUrl} target="_blank">
            <Icon name="ic:baseline-mode-edit" size={20} class="inline" />
            <span>Editar esta p√°gina</span>
          </a>
        </p>
      </article>
      <nav
        class="toc sticky top-14 py-8 w-40 lg:w-64 self-start hidden lg:block"
      >
        <ul class="flex flex-col gap-2">
          {
            headings
              .filter(({ depth }) => depth > 1)
              .map(({ slug, text, depth }) => {
                const padding = depth > 2 ? depth - 2 : '';

                return (
                  <li
                    class="text-slate-400 hover:text-slate-700 dark:hover:text-white transition-all duration-300"
                    style={`margin-left: ${padding}rem`}
                  >
                    <a href={`#${slug}`}>{text}</a>
                  </li>
                );
              })
          }
        </ul>
      </nav>
    </div>
  </body>
</html>

<style is:global>
  html,
  body {
    @apply scroll-smooth;
  }

  nav.toc a.active {
    @apply text-slate-700 dark:text-white font-bold;
  }

  :is(h1, h2, h3, h4, h5, h6)[id] {
    padding-top: 3rem;
  }
</style>

<script is:inline>
  const sections = document.querySelectorAll(':is(h2, h3, h4, h5, h6)[id]');

  const navLinks = document.querySelectorAll('nav.toc li a');

  navLinks[0].classList.add('active');

  window.addEventListener('scroll', () => {
    let current = '';

    sections.forEach((section) => {
      const documentTop = Math.ceil(document.documentElement.scrollTop);

      const bodyHeight = document.body.clientHeight;

      const firstSectionTop = sections[0].offsetTop;

      const sectionTop = section.offsetTop;

      // const sectionHeight = section.clientHeight;

      // console.log(
      //   section.id,
      //   sectionTop,
      //   documentTop,
      //   documentTop < firstSectionTop,
      //   documentTop >= sectionTop,
      //   documentTop >= bodyHeight - window.innerHeight
      // );

      if (documentTop < firstSectionTop) {
        current = sections[0].id;
      } else if (documentTop >= sectionTop) {
        current = section.id;
      } else if (documentTop >= bodyHeight - window.innerHeight) {
        current = sections[sections.length - 1].id;
      }
    });

    navLinks.forEach((link) => {
      link.classList.remove('active');

      if (decodeURI(link.href.split('#').pop()) === current) {
        link.classList.add('active');
      }
    });
  });
</script>
