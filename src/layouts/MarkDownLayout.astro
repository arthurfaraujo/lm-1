---
import { getCollection } from 'astro:content';
import { Icon } from 'astro-icon';
import NavBar from '../components/NavBar.astro';
import Sidebar from '../components/Sidebar.astro';
import { CLASSNOTE_SLUGS, GITHUB_EDIT_URL } from '../consts';

import '../styles/code.css';

export interface Props {
  frontmatter: {
    title: string;
  };
  file: string;
  slug: string;
  headings: {
    slug: string;
    text: string;
    depth: number;
  }[];
}

const { frontmatter, headings, file, slug: currentSlug } = Astro.props;

const classroomEntries = await getCollection('classnotes');

const classNoteTitles: Record<string, string> = classroomEntries.reduce(
  (acc, { data: { title }, slug }) => ({
    ...acc,
    [slug]: title,
  }),
  {}
);

const classNoteIndex = CLASSNOTE_SLUGS.findIndex(
  (slug) => slug === currentSlug
);

const previousClassNote = CLASSNOTE_SLUGS[classNoteIndex - 1];

const nextClassNote = CLASSNOTE_SLUGS[classNoteIndex + 1];

const githubEditUrl = `${GITHUB_EDIT_URL}/src${file.split('/src').pop()}`;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />
    <title>{frontmatter?.title ?? 'LM'}</title>
  </head>
  <body class="bg-gray-100 dark:bg-slate-800 dark:text-white">
    <NavBar />
    <div
      class="relative z-0 lg:pl-40 xl:pl-64 flex max-sm:flex-col justify-between items-stretch"
    >
      <Sidebar />

      <article
        class="md:mx-auto py-8 max-sm:px-4 prose 2xl:prose-xl dark:prose-invert overflow-hidden"
      >
        <slot />

        <p class="mt-16">
          <a href={githubEditUrl} target="_blank">
            <Icon name="ic:baseline-mode-edit" size={20} class="inline" />
            <span>Editar esta página</span>
          </a>
        </p>

        {
          CLASSNOTE_SLUGS.includes(currentSlug) && (
            <footer class="my-24">
              <div class="flex flex-col md:flex-row max-sm:gap-4 items-center justify-between">
                {previousClassNote && (
                  <div>
                    <a
                      class="text-lg font-medium p-4 -m-4 no-underline text-gray-500 dark:text-white hover:text-gray-700 flex items-center mr-2"
                      title="Disciplina"
                      href={`/lm/${previousClassNote}`}
                    >
                      <svg
                        height="24"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                        class="transform inline flex-shrink-0 rotate-180 mr-1"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M9 5l7 7-7 7"
                        />
                      </svg>
                      {classNoteTitles[previousClassNote]}
                    </a>
                  </div>
                )}

                {nextClassNote && (
                  <div>
                    <a
                      class="text-lg font-medium p-4 -m-4 no-underline text-gray-500 dark:text-white hover:text-gray-700 flex items-center ml-2"
                      title="Conteúdo"
                      href={`/lm/${nextClassNote}`}
                    >
                      {classNoteTitles[nextClassNote]}
                      <svg
                        height="24"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                        class="transform inline flex-shrink-0 ml-1"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M9 5l7 7-7 7"
                        />
                      </svg>
                    </a>
                  </div>
                )}
              </div>
            </footer>
          )
        }
      </article>

      <nav
        class="toc sticky top-14 py-8 w-40 lg:w-64 self-start hidden lg:block"
      >
        <ul class="flex flex-col gap-2">
          {
            headings
              .filter(({ depth }) => depth > 1)
              .map(({ slug, text, depth }) => {
                const padding = depth > 2 ? depth - 2 : '';

                return (
                  <li
                    class="text-slate-400 hover:text-slate-700 dark:hover:text-white transition-all duration-300"
                    style={`margin-left: ${padding}rem`}
                  >
                    <a href={`#${slug}`}>{text}</a>
                  </li>
                );
              })
          }
        </ul>
      </nav>
    </div>
  </body>
</html>

<style is:global>
  /* rehype-autolink-headings */
  article :is(h2, h3, h4, h5, h6) {
    @apply flex items-center;
  }

  article :is(h2, h3, h4, h5, h6):hover > a {
    @apply block;
  }

  article :is(h1, h2, h3, h4, h5, h6) > a {
    @apply ml-1 hidden;
  }

  article :is(h2, h3, h4, h5, h6) > a {
    @apply max-sm:block;
  }

  article .heading-link svg {
    @apply m-0 h-4 w-4;
  }

  /* Table of Content */
  html,
  body {
    @apply scroll-smooth;
  }

  nav.toc a.active {
    @apply text-slate-700 dark:text-white font-bold;
  }

  :is(h1, h2, h3, h4, h5, h6)[id] {
    @apply pt-12;
  }

  /* Copy to clipboard */
  pre {
    @apply relative;
  }

  html.dark pre button {
    @apply bg-gray-400 text-gray-800;
  }

  html.dark pre button:hover {
    @apply bg-gray-100;
  }

  pre button {
    @apply hidden;
  }

  .copy-button-block {
    @apply block bg-gray-400 text-white absolute top-2 right-2 rounded p-1;
  }

  pre:hover button {
    @apply block bg-gray-400 text-white absolute top-2 right-2 rounded p-1;
  }

  pre button:hover {
    @apply bg-gray-700 cursor-pointer;
  }
</style>

<script is:inline>
  // Table of Content
  const sections = document.querySelectorAll(':is(h2, h3, h4, h5, h6)[id]');

  const navLinks = document.querySelectorAll('nav.toc li a');

  navLinks[0].classList.add('active');

  window.addEventListener('scroll', () => {
    let current = '';

    sections.forEach((section) => {
      const documentTop = Math.ceil(document.documentElement.scrollTop);

      const bodyHeight = document.body.clientHeight;

      const firstSectionTop = sections[0].offsetTop;

      const sectionTop = section.offsetTop;

      // const sectionHeight = section.clientHeight;

      // console.log(
      //   section.id,
      //   sectionTop,
      //   documentTop,
      //   documentTop < firstSectionTop,
      //   documentTop >= sectionTop,
      //   documentTop >= bodyHeight - window.innerHeight
      // );

      if (documentTop < firstSectionTop) {
        current = sections[0].id;
      } else if (documentTop >= sectionTop) {
        current = section.id;
      } else if (documentTop >= bodyHeight - window.innerHeight) {
        current = sections[sections.length - 1].id;
      }
    });

    navLinks.forEach((link) => {
      link.classList.remove('active');

      if (decodeURI(link.href.split('#').pop()) === current) {
        link.classList.add('active');
      }
    });
  });

  // Copy to clipboard
  // lucide:copy
  const copyButton =
    '<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"><rect width="14" height="14" x="8" y="8" rx="2" ry="2"/><path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"/></g></svg>';

  // material-symbols:check-small
  const copyButtonCheck =
    '<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24"><path fill="currentColor" d="m10 16.4l-4-4L7.4 11l2.6 2.6L16.6 7L18 8.4l-8 8Z"/></svg>';

  // use a class selector if available
  let blocks = document.querySelectorAll('pre');

  blocks.forEach((block) => {
    // only add button if browser supports Clipboard API
    if (navigator.clipboard) {
      let button = document.createElement('button');

      button.innerHTML = copyButton;
      block.appendChild(button);

      button.addEventListener('click', async () => {
        button.classList.add('copy-button-block');
        await copyCode(block, button);
      });
    }
  });

  async function copyCode(block, button) {
    let code = block.querySelector('code');
    let text = code.innerText;

    await navigator.clipboard.writeText(text);

    // visual feedback that task is completed
    button.innerHTML = copyButtonCheck;

    setTimeout(() => {
      button.innerHTML = copyButton;
      button.classList.remove('copy-button-block');
    }, 1000);
  }
</script>
